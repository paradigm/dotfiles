#!/bin/sh

# Ensure built-in to avoid sensitive material showing up in /proc
if ! type echo | grep -q '^echo is a shell builtin$'
then
	echo '`echo` is not a shell builtin, aborting' >&2
	exit 1
fi
if ! type printf | grep -q '^printf is a shell builtin$'
then
	echo '`printf` is not a shell builtin, aborting' >&2
	exit 1
fi

connect_ethernet() {
	printf "Running DHCP client... "
	pkill dhclient >/dev/null 2>&1
	dhclient "${1}"
	echo "done"
}

connect_wifi() {
	printf "Preparing wifi device... "
	ip link set "${1}" down
	pkill wpa_supplicant >/dev/null 2>&1
	pkill dhclient >/dev/null 2>&1
	#if lsmod | grep -q iwlwifi; then
	#	rmmod iwldvm >/dev/null 2>&1
	#	rmmod iwlwifi >/dev/null 2>&1
	#	rmmod ath11k_pci >/dev/null 2>&1
	#	modprobe iwlwifi >/dev/null 2>&1
	#	modprobe iwldvm >/dev/null 2>&1
	#fi
	#if lsmod | grep -q rtlwifi; then
	#	rmmod rtl8192cu >/dev/null 2>&1
	#	rmmod rtl_usb >/dev/null 2>&1
	#	rmmod rtl8192c_common >/dev/null 2>&1
	#	rmmod rtlwifi >/dev/null 2>&1
	#	modprobe rtlwifi >/dev/null 2>&1
	#	modprobe rtl8192c_common >/dev/null 2>&1
	#	modprobe rtl_usb >/dev/null 2>&1
	#	modprobe rtl8192cu >/dev/null 2>&1
	#fi
	if dmesg | grep -q "ath11k_pci"; then
		rmmod ath11k >/dev/null 2>&1
		rmmod ath11k_pci >/dev/null 2>&1
		modprobe ath11k >/dev/null 2>&1
		modprobe ath11k_pci >/dev/null 2>&1
	fi
	end="$(( $(date +%s) + 3 ))"
	while ! ip link set "${1}" up >/dev/null 2>&1 && [ "$(date +%s)" -lt "${end}" ]; do
		sleep 0.1
	done

	end="$(( $(date +%s) + 10 ))"
	scan="$(iwlist "${1}" scan 2>/dev/null)"
	while [ "$(echo "${scan}" | wc -l)" -le 1 ] && [ "$(date +%s)" -lt "${end}" ]; do
		scan="$(iwlist "${1}" scan 2>/dev/null)"
	done
	echo "done"

	printf "Determining wifi network... "
	saved="$(grep "^$(id -un):" /etc/passwd | awk -F: '{print$6}')/.networks"
	network_and_pass="$(echo "${scan}" | awk -F'[=:"/]' -v"n=${saved}" '
	BEGIN {
		while ((getline < n) > 0) {
			split($0,a,"\t\t*")
			if (a[1] != "") {
				saved[a[1]] = a[2]
			}
		}
	}
	/Quality/ {
		quality=$2
	}
	/ESSID/ {
		if ($3 in saved) {
			print quality"\t"$3"\t"saved[$3]
		}
	}
	' | sort | cut -d'	' -f2- | tail -n1 2>/dev/null)"
	network="$(echo "${network_and_pass}" | cut -d'	' -f1)"
	pass="$(echo "${network_and_pass}" | cut -d'	' -f2-)"
	if [ -z "${network}" ]; then
		echo "FAILED!"
		exit 1
	fi
	echo "${network}"


	if [ -n "${pass}" ]; then
		printf "Performing WPA handshake... "
		tmp_conf="/dev/shm/net-up-${$}.conf"
		tmp_log="/dev/shm/net-up-${$}.log"

		printf 'network={\n\tssid="%s"\n\tpsk="%s"\n}\n' "${network}" "${pass}" > "${tmp_conf}"
		wpa_supplicant -Dwext -i"${1}" -c"${tmp_conf}" -B -f"${tmp_log}"
		rm "${tmp_conf}"

		timeout=20
		start=$(date +%s)
		while ! grep -q 'Associated with' "${tmp_log}" && \
			[ "$(expr "$(date +%s)" - "${start}")" -lt "${timeout}" ]; do
			sleep .25s
		done

		if grep -q 'Associated with' "${tmp_log}"; then
			rm "${tmp_log}"
			echo "done"
		else
			rm "${tmp_log}"
			echo "FAILED!"
			exit 1
		fi
	fi

	printf "Running DHCP client... "
	dhclient "${1}"
	echo "done"
}

test_connection() {
	printf "Testing connnection... "
	if ping -c1 www.example.com >/dev/null 2>&1; then
		echo "done"
		return 0
	else
		echo "FAILED!"
		return 1
	fi
}

printf "Determining network interface... "
netif=""
if eth_if="$(ls /sys/class/net/e* >/dev/null 2>&1 && basename /sys/class/net/e* 2>/dev/null | head -n1)"; then
	if ! ip link show "${eth_if}" | grep "state UP"; then
		ip link set "${eth_if}" up
		sleep 2
	fi
	if grep -q "1" "/sys/class/net/${eth_if}/carrier"; then
		echo "${eth_if}"
		connect_ethernet "${eth_if}"
		test_connection
		exit "${?}"
	fi
fi

if wifi_if="$(ls /sys/class/net/w* >/dev/null 2>&1 && basename /sys/class/net/w* 2>/dev/null | head -n1)"; then
	echo "${wifi_if}"
	connect_wifi "${wifi_if}"
	test_connection
	exit "${?}"
fi

echo "FAILED!"
exit 1
